# basic init, append and methods 
var l = [1, 2, 3]
assert $l == [1, 2, 3]
assert $l.len() == 3

var last = $l.pop()
assert $last == 3
assert $l.len() == 2

var first = $l.pop(0)
assert $first == 1
assert $l.len() == 1

# assigning variable to list from a different scope
{
    var l2 = [4, 5, 6]
    $l = $l2
}
assert $l == [4, 5, 6]
# todo: assert l2 is none

# adding and removing values from list originating from different scope
$l += 7
assert $l.pop() == 7
$l += [7, 8]
assert $l == [4, 5, 6, 7, 8]

# slice
var underlying = [1, 2, 3, 4, 5]
var sliced = $underlying[..2]
assert $sliced == [1, 2]
$sliced = $underlying[1..3]
assert $sliced == [2, 3]

# slice append
$sliced += 0
assert $sliced == [2, 3, 0]

# list and loops
{
    var list1 = [5, 6, 7]
    var idx = 0
    loop value in $list1 {
        assert $value == $list1[$idx]
        $idx += 1
    }
}


# 'in' keyword
{
    var list1 = [1, 2, 3]
    var two = 2
    assert 1 in $list1
    assert $two in $list1
}

# sorting with numbers asc
{
    var list1 = [3, 4, 1, 5, 2, 8, 4]
    $list1.sort()
    var i = 0
    loop $list1.len() - 1 > $i {
        assert $list1[$i] <= $list1[$i + 1]
        $i += 1
    }
}

# sorting with numbers desc
{
    var list1 = [3, 4, 1, 5, 2, 8, 4]
    $list1.sort(true)
    var i = 0
    loop $list1.len() - 1 > $i {
        assert $list1[$i] >= $list1[$i + 1]
        $i += 1
    }
}

# sorting with strings and numbers
{
    var list1 = ["Nicolai", "Callum", 2, "Aidan", 4, "Zach", "Brendan", 1]
    $list1.sort()
    var i = 0
    loop item in $list1 {
        echo $item
    }
}

assert [1, 2, 3][0] == 1
