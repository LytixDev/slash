# basic init, append and methods 
var l = [1, 2, 3]
assert $l == [1, 2, 3]
assert $l.len() == 3

var last = $l.pop()
assert $last == 3
assert $l.len() == 2

var first = $l.pop(0)
assert $first == 1
assert $l.len() == 1

# assigning variable to list from a different scope
{
    var l2 = [4, 5, 6]
    $l = $l2
}
assert $l == [4, 5, 6]
# todo: assert l2 is none

# adding and removing values from list originating from different scope
$l += 7
assert $l.pop() == 7
$l += [7, 8]
assert $l == [4, 5, 6, 7, 8]

# slice
var underlying = [1, 2, 3, 4, 5]
var sliced = $underlying[..2]
assert $sliced == [1, 2]
$sliced = $underlying[1..3]
assert $sliced == [2, 3]

# slice append
$sliced += 0
assert $sliced == [2, 3, 0]
# check that underlying list was not modified by change to slice
var underlying = [1, 2, 3, 4, 5]


# list and loops
{
    var list1 = [5, 6, 7]
    var idx = 0
    loop value in $list1 {
        assert $value == $list1[$idx]
        $idx += 1
    }
}


# 'in' keyword
{
    var list1 = [1, 2, 3]
    var two = 2
    assert 1 in $list1
    assert $two in $list1
}

# sorting with numbers asc
{
    var list1 = [3, 4, 1, 5, 2, 8, 4]
    $list1.sort()
    var idx = 0
    var nx = 1
    loop $nx < $list1.len() {
        assert $list1[$idx] <= $list1[$nx]
        $nx = $nx + 1
        $idx = $idx + 1
    }
}

# sorting with numbers desc
{
    var list1 = [3, 4, 1, 5, 2, 8, 4]
    $list1.sort(false)
    var idx = 0
    var nx = 1
    loop $nx < $list1.len() {
        assert $list1[$idx] >= $list1[$nx]
        $nx = $nx + 1
        $idx = $idx + 1
    }
}



# sorting with strings and numbers
{
    var list1 = ["Nicolai", "Callum", 2, "Aidan", 4, "Zach", "Brendan", 1]
    $list1.sort()
    var idx = 0
    var nx = 1
    loop $nx < $list1.len() {
        var current = $list1[$idx]
        echo $current
        $nx = $nx + 1
        $idx = $idx + 1
    }
}

# sorting with tuples
{
    var list1 = [' 21, 3 ', ' 5, 4 ', ' 4, 6 ', ' 7, "Cock" ', ' "Balls", 10 ', ' 1, 2, '3, 4' ', ' 1, 1 ']

    $list1.sort(false)

    loop item in $list1 {
        var fst = $item[0]
        var snd = $item[1]
        echo "(" $fst "," $snd ")"
    }
}

# inline subscript 
assert [1, 2, 3][0] == 1
