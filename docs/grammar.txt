context-free expression grammar:

program      -> declaration* EOF ;

declaration  -> varDecl
             -> varGoDecl
             | statement ;

statement    -> exprStmt
             |  forStmt
             |  ifStmt
             |  printStmt
             |  returnStmt
             |  whileStmt
             |  block ;

returnStmt   -> "return" expression? ";" ;

forStmt      -> "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;

whileStmt    -> "while" "(" expression ")" statement ;

ifStmt       -> "if" "(" expression ")" statement ( "else" statement )? ;

block        -> "{" declaration* "}" ;

declaration  -> funDecl
             |  varDecl
             |  varGoDecl
             |  statement ;

funDecl      -> "fun" function ;
function     -> IDENTIFIER "(" parameters? ")" block ;
parameters   -> IDENTIFIER ( "," IDENTIFIER )* ;

varDecl      -> "var" IDENTIFIER ( "=" expression )? ";" ;
varGoDecl    -> IDENTIFIER ":=" expression ";" ;

exprStmt     -> expression ";" ;
printStmt    -> "print" expression ";" ;

expression   -> assignment ;
assignment   -> IDENTIFIER "=" assignment
             |  equality
             |  logic_or ;

logic_or     -> logic_and ( "or" logic_and )* ;
logic_and    -> equality ( "and" equality )* ;

equality     -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison   -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term         -> factor ( ( "-" | "+" ) factor )* ;
factor       -> unary ( ( "/" | "*" ) unary )* ;
unary        -> ( "!" | "-") unary
             |  call;

call         -> primary ( "(" arguments? ")" )* ;
arguments    -> expression ( "," expression )* ;


primary      -> "true" | "false" | "nil"
             |  NUMBER | STRING
             |  "(" expression ")"
             |  IDENTIFIER ;

