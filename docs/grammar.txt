/* context-free expression grammar */

Each rule is a name followed by an arrow, followed by a sequence of of symbols ending with a semicolon.
Terminals are qouted strings or uppercase words.
Non-terminals are lowercase words.
'|' symbol seperates series of productions for a given rule.
() grouping
* repeat zero or more times
+ repeat one or more times
? optional



program         -> declaration* EOF ;

newline         -> ( "\n" | ";" )+ ;

expr_promotion  -> newline | "}" | "&&" | "||" ;

declaration     -> var_declaration
                |  and_or ;

var_decl_start  -> "var" IDENTIFIER ( var_decl_reg | var_decl_seq ) ;

var_decl_reg    -> "=" ( func_def | ( top_level_expr newline ) );

var_decl_seq    -> ( "," IDENTIFIER )* "=" top_level_expr newline ;

func_def        -> arguments? block ;

arguments       -> IDENTIFIER ( "," IDENTIFIER NEWLINE? )* ;


and_or          -> statement ( ( "&&" | "||" ) statement )* ;


/* statements */

statement       -> loop_stmt
                |  assert_stmt
                |  if_stmt
                |  pipeline_stmt
                |  block
                |  assignment_stmt
                |  abrupt_stmt
                |  expr_stmt ;

loop_stmt       -> "loop" ( IDENTIFIER "in" )? top_level_expr block ;

assert_stmt     -> "assert" top_level_expr newline_or_block_end ;

if_stmt         -> "if" expression block ( ( "elif" expression block ) | ( "else" block ) )? ;

pipeline_stmt   -> cmd_stmt ( "|" pipeline_stmt )* ;

redirect_stmt   -> cmd_stmt ( ">" | ">>" | "<" ) expression ;

cmd_stmt        -> TEXT_LIT expression* ;

block           -> "{" declaration* "}" ;

assignment_stmt -> top_level_expr ( "=" | "+=" | "-=" | "*=" | "**=" | "%=" | "%=" ) top_level_expr newline_or_block_end ;

abrupt_stmt     -> "break"
                 | "continue"
                 | "return" expression? ;

expr_stmt       -> top_level_expr newline_or_block_end ;



/* expressions */

top_level_expr  -> expression
                |  sequence_expr ;

sequence_expr   -> ( expression ( "," expression NEWLINE? )* )? ;

expression      -> logical_or ;

logical_or      -> logical_and ( "or" logical_and )* ;

logical_and     -> equality ( "and" equality )* ;

equality        -> comparison ( ( "!=" | "==" ) comparison )* ;

comparison      -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term            -> factor ( ( "-" | "+" ) factor )* ;

factor          -> exponentiation ( ("/" | "//" | "*" | "%" ) exponentiation )* ;

exponentiation  -> unary ( "**" unary )* ;

unary           -> ("not" | "-") unary
                |  single ;

single          -> subshell
                |  contains
                |  cast
                |  range
                |  subscript
                |  call ;

subshell        -> "(" declaration+ ")" ;

/// method_call     -> expression "." IDENTIFIER "(" sequence_expr ")" ;

contains        -> expression "in" expression ;

cast            -> expression "as" IDENTIFIER ;

range           -> expression? ".." expression ;

subscript       -> access ( "[" expression "]" access? )* ;

call            -> access "(" sequence_expr ")" ; 
/// call        -> primary ( "(" sequence_expr ") )* ;

access          -> ACCESS | primary ;

primary         -> STRING 
                |  TEXT_LIT
                |  IDENTIFIER
                |  bool_lit
                |  number
                |  list
                |  map
                |  tuple 
                |  grouping ;

bool_lit        -> "true" | "false ";

number          -> NUMBER ;

list            -> "[" sequence_expr "]" ;

map             -> "@[" ( expression ":" expression "," )* "]"

tuple           -> sequence_expr
                |  "(" sequence_expr ")" ;

grouping        -> "(" expression ")" ;
